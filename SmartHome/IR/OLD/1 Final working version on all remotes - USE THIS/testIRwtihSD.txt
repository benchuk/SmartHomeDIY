/* Raw IR decoder sketch!
 
 This sketch/program uses the Arduno and a PNA4602 to 
 decode IR received. This can be used to make a IR receiver
 (by looking for a particular code)
 or transmitter (by pulsing an IR LED at ~38KHz for the
 durations detected 
 
 Code is public domain, check out www.ladyada.net and adafruit.com
 for more tutorials! 
 */
 
// We need to use the 'raw' pin reading methods
// because timing is very important here and the digitalRead()
// procedure is slower!
//uint8_t IRpin = 2;
// Digital pin #2 is the same as Pin D2 see
// http://arduino.cc/en/Hacking/PinMapping168 for the 'raw' pin mapping

//SD CARD Stuff
//#include <SD.h>
//#include <SPI.h>

    //int CS_PIN = 10;

    //File file;

    //char* fileName = "irOn3.txt";

    //IR Stuff
    #define IRpin_PIN      PIND
    #define IRpin          2
 
    // the maximum pulse we'll listen for - 65 milliseconds is a long time
    #define MAXPULSE 65000
 
    // what our timing resolution should be, larger is better
    // as its more 'precise' - but too large and you wont get
    // accurate timing
    #define RESOLUTION 20 
 
    // we will store up to 100 pulse pairs (this is -a lot-)
    //uint16_t pulses[100][2] = {{0}};;  // pair is high and low pulse 
//    uint16_t pulses[68][2] =  {{2684,847},{478,407},{467,438},{423,897},{475,844},{1362,882},{502,435},{469,414},{447,460},{446,482},{424,465},{441,482},{467,423},{439,458},{448,483},{423,483},{884,430},{490,446},{396,474},{420,927},{503,414},{444,482},{423,459},{447,461},{860,938},{500,435},{424,461},{444,462},{490,418},{904,888},{501,436},{469,437},{882,68510},{2684,847},{478,407},{467,438},{423,897},{475,844},{1362,882},{502,435},{469,414},{447,460},{446,482},{424,465},{441,482},{467,423},{439,458},{448,483},{423,483},{884,430},{490,446},{396,474},{420,927},{503,414},{444,482},{423,459},{447,461},{860,938},{500,435},{424,461},{444,462},{490,418},{904,888},{501,436},{469,437},{882,68510}};
//    uint16_t pulses[33][2] = {{2710,821},{458,422},{456,422},{484,866},{458,866},{1340,897},{486,424},{481,424},{483,423},{482,421},{485,426},{480,430},{476,423},{483,423},{483,425},{481,424},{896,437},{484,430},{456,437},{456,441},{453,902},{485,423},{483,423},{484,421},{898,904},{487,453},{454,422},{484,422},{484,423},{896,905},{486,423},{528,375},{899,68540}};
   uint16_t pulses[33][2] = {{8000,2710},{821,458},{422,456},{422,484},{866,458},{866,1340},{897,486},{424,481},{424,483},{423,482},{421,485},{426,480},{430,476},{423,483},{423,483},{425,481},{424,896},{437,484},{430,456},{437,456},{441,453},{902,485},{423,483},{423,484},{421,898},{904,487},{453,454},{422,484},{422,484},{423,896},{905,486},{423,528},{375,899}};  

    uint8_t currentpulse = 0; // index for pulses we're storing
    bool coderecorded = true;
    // int IRledPin =  13;    // LED connected to digital pin 13
    int IRledPin =  13;    // LED connected to digital pin 13
    //int counter = 0;
    int counter = 33;
    
  void setup(void)
  {
    Serial.begin(115200);
    Serial.println("Ready to decode IR!");
    //pinMode(IRledPin, OUTPUT);
     pinMode(IRledPin, OUTPUT);
    //initializeSD();
    //will not erase if already there will just open the file.
    //  createFile(fileName);  
    // Serial.println("Sending....");
    //sendcode();
  }
 
  void loop(void)
  {
    //  if(!coderecorded)
    //  {
    //     recordircode();   
    //  }
    //  else
    //  {
          Serial.println("Sending....");
          sendcode();
//          //    openFile(fileName);
//          //    Serial.println(readLine());
//          //    Serial.println(readLine());
//          //    Serial.println(readLine());
//          //    Serial.println(readLine());
//          //    Serial.println(readLine());
//          //    Serial.println(readLine());
//          //    Serial.println(readLine());
//          //    Serial.println(readLine());
//          //    closeFile();  
//          delay(10000);
     // }
     delay(4000);
  }
 
 void sendcode()
 {
   //Serial.println("=================================");
   cli(); // this turns off any background interrupts
    for (uint8_t i = 0; i < counter; i++) {
       //Serial.println(i);
       //Serial.println(pulses[i][0], DEC);
       //delayMicroseconds(pulses[i][0] * RESOLUTION);
       delayMicroseconds(pulses[i][0]);
       //Serial.println(pulses[i][1], DEC);
       //pulseIR(pulses[i][1] * RESOLUTION);
       pulseIR(pulses[i][1] );
       
    }
    sei();  // this turns them back on
    //Serial.println("=================================");
 }
 
 // This procedure sends a 38KHz pulse to the IRledPin 
// for a certain # of microseconds. We'll use this whenever we need to send codes
 void pulseIR(long microsecs) {
  // we'll count down from the number of microseconds we are told to wait

  while (microsecs > 0) 
  {
      // 38 kHz is about 13 microseconds high and 13 microseconds low      
     digitalWrite(IRledPin, HIGH);  // this takes about 3 microseconds to happen
     delayMicroseconds(8);         // hang out for 10 microseconds
     digitalWrite(IRledPin, LOW);   // this also takes about 3 microseconds
     delayMicroseconds(8);         // hang out for 10 microseconds
   
     // so 26 microseconds altogether
     microsecs -= 26;
  }
 }

 void recordircode()
 {

   uint16_t highpulse, lowpulse;  // temporary storage timing
   highpulse = lowpulse = 0; // start out with no pulse length
 
 
    //while (digitalRead(IRpin)) { // this is too slow!
    while (IRpin_PIN & (1 << IRpin))
    {
      // pin is still HIGH
 
      // count off another few microseconds
      highpulse++;
      delayMicroseconds(RESOLUTION);
   
      // If the pulse is too long, we 'timed out' - either nothing
      // was received or the code is finished, so print what
      // we've grabbed so far, and then reset
      if ((highpulse >= MAXPULSE) && (currentpulse != 0))
      {
         printpulses();
         currentpulse=0;
         return;
      }
   }
   
   // we didn't time out so lets stash the reading
   pulses[currentpulse][0] = highpulse;
 
   // same as above
   while (! (IRpin_PIN & _BV(IRpin)))
   {
     // pin is still LOW
     lowpulse++;
     delayMicroseconds(RESOLUTION);
     if ((lowpulse >= MAXPULSE)  && (currentpulse != 0))
     {
       printpulses();
       currentpulse=0;
       return;
     }
  }
  
  pulses[currentpulse][1] = lowpulse;
 
  // we read one high-low pulse successfully, continue!
  currentpulse++;
 }
 
void printpulses(void) {
  coderecorded = true;
  Serial.println("\n\r\n\rReceived: \n\rOFF \tON");
  for (uint8_t i = 0; i < currentpulse; i++) {
    Serial.print(pulses[i][0] * RESOLUTION, DEC);
    Serial.print(" usec, ");
    Serial.print(pulses[i][1] * RESOLUTION, DEC);
    
   // String s = String(pulses[i][0] * RESOLUTION) + "," + String(pulses[i][1] * RESOLUTION);
   // char charBuf[s.length()+1];
   // s.toCharArray(charBuf, s.length()+1);
   // writeToFile(charBuf);
    Serial.println(" usec");
  }
  counter = currentpulse;
  //closeFile();
}

//void initializeSD()
//{
//  Serial.println("Initializing SD card...");
//  pinMode(CS_PIN, OUTPUT);
//
//  if (SD.begin())
//  {
//    Serial.println("SD card is ready to use.");
//  } else
//  {
//    Serial.println("SD card initialization failed");
//    return;
//  }
//}
//
//int createFile(char filename[])
//{
//  file = SD.open(filename, FILE_WRITE);
//
//  if (file)
//  {
//    Serial.println("File created successfully.");
//    return 1;
//  } else
//  {
//    Serial.println("Error while creating file.");
//    return 0;
//  }
//}
//
//int writeToFile(char text[])
//{
//  if (file)
//  {
//    file.println(text);
//    Serial.println("Writing to file: ");
//    Serial.println(text);
//    return 1;
//  } else
//  {
//    Serial.println("Couldn't write to file");
//    return 0;
//  }
//}
//
//void closeFile()
//{
//  if (file)
//  {
//    file.close();
//    Serial.println("File closed");
//  }
//}
//
//int openFile(char filename[])
//{
//   file = SD.open(filename);
//  if (file)
//  {
//    Serial.println("File opened with success!");
//    return 1;
//  } else
//  {
//    Serial.println("Error opening file...");
//    return 0;
//  }
//}
//
//String readLine()
//{
//  String received = "";
//  char ch;
//  while (file.available())
//  {
//    ch = file.read();
//    if (ch == '\n')
//    {
//      return String(received);
//    }
//    else
//    {
//      received += ch;
//    }
//  }
//  return "";
//}
