
optiboot_atmega644p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e2  0000fc00  0000fc00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  0000fffe  0000fffe  00000236  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005f  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000294  00000000  00000000  000002bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016b  00000000  00000000  00000553  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000421  00000000  00000000  000006be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000131  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000266  00000000  00000000  00000c91  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00000ef7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000fc00 <main>:
# define UART_SRL UBRR3L
# define UART_UDR UDR3
#endif

/* main program starts here */
int main(void) {
    fc00:	11 24       	eor	r1, r1
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    fc02:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    fc04:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart(ch);
    fc06:	81 ff       	sbrs	r24, 1
    fc08:	e6 d0       	rcall	.+460    	; 0xfdd6 <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    fc0a:	85 e0       	ldi	r24, 0x05	; 5
    fc0c:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    fc10:	82 e0       	ldi	r24, 0x02	; 2
    fc12:	80 93 c0 00 	sts	0x00C0, r24
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    fc16:	88 e1       	ldi	r24, 0x18	; 24
    fc18:	80 93 c1 00 	sts	0x00C1, r24
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    fc1c:	86 e0       	ldi	r24, 0x06	; 6
    fc1e:	80 93 c2 00 	sts	0x00C2, r24
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    fc22:	80 e1       	ldi	r24, 0x10	; 16
    fc24:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    fc28:	8e e0       	ldi	r24, 0x0E	; 14
    fc2a:	bf d0       	rcall	.+382    	; 0xfdaa <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    fc2c:	20 9a       	sbi	0x04, 0	; 4
    fc2e:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    fc30:	20 e3       	ldi	r18, 0x30	; 48
    fc32:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    fc34:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    fc36:	30 93 85 00 	sts	0x0085, r19
    fc3a:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
    fc3e:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    fc40:	b0 9b       	sbis	0x16, 0	; 22
    fc42:	fe cf       	rjmp	.-4      	; 0xfc40 <main+0x40>
#if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    fc44:	18 9a       	sbi	0x03, 0	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fc46:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    fc48:	81 50       	subi	r24, 0x01	; 1
    fc4a:	a9 f7       	brne	.-22     	; 0xfc36 <main+0x36>
    fc4c:	ee 24       	eor	r14, r14
    fc4e:	ff 24       	eor	r15, r15
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    fc50:	aa 24       	eor	r10, r10
    fc52:	a3 94       	inc	r10
        addrPtr += 2;
      } while (--ch);

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    fc54:	b5 e0       	ldi	r27, 0x05	; 5
    fc56:	cb 2e       	mov	r12, r27
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    fc58:	a1 e1       	ldi	r26, 0x11	; 17
    fc5a:	ba 2e       	mov	r11, r26

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account (not doing so just means that we will
      //  treat the top of both "pages" of flash as NRWW, for a slight speed
      //  decrease, so fixing this is not urgent.)
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    fc5c:	f3 e0       	ldi	r31, 0x03	; 3
    fc5e:	df 2e       	mov	r13, r31
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    fc60:	98 d0       	rcall	.+304    	; 0xfd92 <getch>

    if(ch == STK_GET_PARAMETER) {
    fc62:	81 34       	cpi	r24, 0x41	; 65
    fc64:	61 f4       	brne	.+24     	; 0xfc7e <main+0x7e>
      unsigned char which = getch();
    fc66:	95 d0       	rcall	.+298    	; 0xfd92 <getch>
    fc68:	08 2f       	mov	r16, r24
      verifySpace();
    fc6a:	a5 d0       	rcall	.+330    	; 0xfdb6 <verifySpace>
      if (which == 0x82) {
    fc6c:	02 38       	cpi	r16, 0x82	; 130
    fc6e:	29 f1       	breq	.+74     	; 0xfcba <main+0xba>
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
      } else if (which == 0x81) {
    fc70:	01 38       	cpi	r16, 0x81	; 129
    fc72:	11 f4       	brne	.+4      	; 0xfc78 <main+0x78>
	  putch(OPTIBOOT_MAJVER);
    fc74:	85 e0       	ldi	r24, 0x05	; 5
    fc76:	01 c0       	rjmp	.+2      	; 0xfc7a <main+0x7a>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    fc78:	83 e0       	ldi	r24, 0x03	; 3
    fc7a:	83 d0       	rcall	.+262    	; 0xfd82 <putch>
    fc7c:	7f c0       	rjmp	.+254    	; 0xfd7c <main+0x17c>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    fc7e:	82 34       	cpi	r24, 0x42	; 66
    fc80:	11 f4       	brne	.+4      	; 0xfc86 <main+0x86>
      // SET DEVICE is ignored
      getNch(20);
    fc82:	84 e1       	ldi	r24, 0x14	; 20
    fc84:	03 c0       	rjmp	.+6      	; 0xfc8c <main+0x8c>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    fc86:	85 34       	cpi	r24, 0x45	; 69
    fc88:	19 f4       	brne	.+6      	; 0xfc90 <main+0x90>
      // SET DEVICE EXT is ignored
      getNch(5);
    fc8a:	85 e0       	ldi	r24, 0x05	; 5
    fc8c:	9c d0       	rcall	.+312    	; 0xfdc6 <getNch>
    fc8e:	76 c0       	rjmp	.+236    	; 0xfd7c <main+0x17c>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    fc90:	85 35       	cpi	r24, 0x55	; 85
    fc92:	79 f4       	brne	.+30     	; 0xfcb2 <main+0xb2>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    fc94:	7e d0       	rcall	.+252    	; 0xfd92 <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    fc96:	e8 2e       	mov	r14, r24
    fc98:	ff 24       	eor	r15, r15
    fc9a:	7b d0       	rcall	.+246    	; 0xfd92 <getch>
    fc9c:	08 2f       	mov	r16, r24
    fc9e:	10 e0       	ldi	r17, 0x00	; 0
    fca0:	10 2f       	mov	r17, r16
    fca2:	00 27       	eor	r16, r16
    fca4:	0e 29       	or	r16, r14
    fca6:	1f 29       	or	r17, r15
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    fca8:	00 0f       	add	r16, r16
    fcaa:	11 1f       	adc	r17, r17
      address = newAddress;
      verifySpace();
    fcac:	84 d0       	rcall	.+264    	; 0xfdb6 <verifySpace>
    fcae:	78 01       	movw	r14, r16
    fcb0:	65 c0       	rjmp	.+202    	; 0xfd7c <main+0x17c>
    }
    else if(ch == STK_UNIVERSAL) {
    fcb2:	86 35       	cpi	r24, 0x56	; 86
    fcb4:	21 f4       	brne	.+8      	; 0xfcbe <main+0xbe>
      // UNIVERSAL command is ignored
      getNch(4);
    fcb6:	84 e0       	ldi	r24, 0x04	; 4
    fcb8:	86 d0       	rcall	.+268    	; 0xfdc6 <getNch>
      putch(0x00);
    fcba:	80 e0       	ldi	r24, 0x00	; 0
    fcbc:	de cf       	rjmp	.-68     	; 0xfc7a <main+0x7a>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    fcbe:	84 36       	cpi	r24, 0x64	; 100
    fcc0:	09 f0       	breq	.+2      	; 0xfcc4 <main+0xc4>
    fcc2:	40 c0       	rjmp	.+128    	; 0xfd44 <main+0x144>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    fcc4:	66 d0       	rcall	.+204    	; 0xfd92 <getch>
      length = getch();
    fcc6:	65 d0       	rcall	.+202    	; 0xfd92 <getch>
    fcc8:	08 2f       	mov	r16, r24
      getch();
    fcca:	63 d0       	rcall	.+198    	; 0xfd92 <getch>

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    fccc:	80 e0       	ldi	r24, 0x00	; 0
    fcce:	e8 16       	cp	r14, r24
    fcd0:	80 ee       	ldi	r24, 0xE0	; 224
    fcd2:	f8 06       	cpc	r15, r24
    fcd4:	18 f4       	brcc	.+6      	; 0xfcdc <main+0xdc>
    fcd6:	f7 01       	movw	r30, r14
    fcd8:	d7 be       	out	0x37, r13	; 55
    fcda:	e8 95       	spm
    fcdc:	c0 e0       	ldi	r28, 0x00	; 0
    fcde:	d1 e0       	ldi	r29, 0x01	; 1

      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    fce0:	58 d0       	rcall	.+176    	; 0xfd92 <getch>
    fce2:	89 93       	st	Y+, r24
      while (--length);
    fce4:	0c 17       	cp	r16, r28
    fce6:	e1 f7       	brne	.-8      	; 0xfce0 <main+0xe0>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account (not doing so just means that we will
      //  treat the top of both "pages" of flash as NRWW, for a slight speed
      //  decrease, so fixing this is not urgent.)
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    fce8:	f0 e0       	ldi	r31, 0x00	; 0
    fcea:	ef 16       	cp	r14, r31
    fcec:	f0 ee       	ldi	r31, 0xE0	; 224
    fcee:	ff 06       	cpc	r15, r31
    fcf0:	18 f0       	brcs	.+6      	; 0xfcf8 <main+0xf8>
    fcf2:	f7 01       	movw	r30, r14
    fcf4:	d7 be       	out	0x37, r13	; 55
    fcf6:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
    fcf8:	5e d0       	rcall	.+188    	; 0xfdb6 <verifySpace>

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    fcfa:	07 b6       	in	r0, 0x37	; 55
    fcfc:	00 fc       	sbrc	r0, 0
    fcfe:	fd cf       	rjmp	.-6      	; 0xfcfa <main+0xfa>
    fd00:	a7 01       	movw	r20, r14
    fd02:	a0 e0       	ldi	r26, 0x00	; 0
    fd04:	b1 e0       	ldi	r27, 0x01	; 1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    fd06:	2c 91       	ld	r18, X
    fd08:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    fd0a:	11 96       	adiw	r26, 0x01	; 1
    fd0c:	8c 91       	ld	r24, X
    fd0e:	11 97       	sbiw	r26, 0x01	; 1
    fd10:	90 e0       	ldi	r25, 0x00	; 0
    fd12:	98 2f       	mov	r25, r24
    fd14:	88 27       	eor	r24, r24
    fd16:	82 2b       	or	r24, r18
    fd18:	93 2b       	or	r25, r19
# define UART_SRL UBRR3L
# define UART_UDR UDR3
#endif

/* main program starts here */
int main(void) {
    fd1a:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    fd1c:	fa 01       	movw	r30, r20
    fd1e:	0c 01       	movw	r0, r24
    fd20:	a7 be       	out	0x37, r10	; 55
    fd22:	e8 95       	spm
    fd24:	11 24       	eor	r1, r1
        addrPtr += 2;
    fd26:	4e 5f       	subi	r20, 0xFE	; 254
    fd28:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    fd2a:	f2 e0       	ldi	r31, 0x02	; 2
    fd2c:	a0 30       	cpi	r26, 0x00	; 0
    fd2e:	bf 07       	cpc	r27, r31
    fd30:	51 f7       	brne	.-44     	; 0xfd06 <main+0x106>

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    fd32:	f7 01       	movw	r30, r14
    fd34:	c7 be       	out	0x37, r12	; 55
    fd36:	e8 95       	spm
      boot_spm_busy_wait();
    fd38:	07 b6       	in	r0, 0x37	; 55
    fd3a:	00 fc       	sbrc	r0, 0
    fd3c:	fd cf       	rjmp	.-6      	; 0xfd38 <main+0x138>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    fd3e:	b7 be       	out	0x37, r11	; 55
    fd40:	e8 95       	spm
    fd42:	1c c0       	rjmp	.+56     	; 0xfd7c <main+0x17c>
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    fd44:	84 37       	cpi	r24, 0x74	; 116
    fd46:	61 f4       	brne	.+24     	; 0xfd60 <main+0x160>
      // READ PAGE - we only read flash
      getch();			/* getlen() */
    fd48:	24 d0       	rcall	.+72     	; 0xfd92 <getch>
      length = getch();
    fd4a:	23 d0       	rcall	.+70     	; 0xfd92 <getch>
    fd4c:	08 2f       	mov	r16, r24
      getch();
    fd4e:	21 d0       	rcall	.+66     	; 0xfd92 <getch>

      verifySpace();
    fd50:	32 d0       	rcall	.+100    	; 0xfdb6 <verifySpace>
        __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
        // read a Flash byte and increment the address
        __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
        putch(ch);
    fd52:	f7 01       	movw	r30, r14
    fd54:	85 91       	lpm	r24, Z+
    fd56:	7f 01       	movw	r14, r30
    fd58:	14 d0       	rcall	.+40     	; 0xfd82 <putch>
      } while (--length);
    fd5a:	01 50       	subi	r16, 0x01	; 1
    fd5c:	d1 f7       	brne	.-12     	; 0xfd52 <main+0x152>
    fd5e:	0e c0       	rjmp	.+28     	; 0xfd7c <main+0x17c>
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    fd60:	85 37       	cpi	r24, 0x75	; 117
    fd62:	39 f4       	brne	.+14     	; 0xfd72 <main+0x172>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    fd64:	28 d0       	rcall	.+80     	; 0xfdb6 <verifySpace>
      putch(SIGNATURE_0);
    fd66:	8e e1       	ldi	r24, 0x1E	; 30
    fd68:	0c d0       	rcall	.+24     	; 0xfd82 <putch>
      putch(SIGNATURE_1);
    fd6a:	86 e9       	ldi	r24, 0x96	; 150
    fd6c:	0a d0       	rcall	.+20     	; 0xfd82 <putch>
      putch(SIGNATURE_2);
    fd6e:	8a e0       	ldi	r24, 0x0A	; 10
    fd70:	84 cf       	rjmp	.-248    	; 0xfc7a <main+0x7a>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    fd72:	81 35       	cpi	r24, 0x51	; 81
    fd74:	11 f4       	brne	.+4      	; 0xfd7a <main+0x17a>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    fd76:	88 e0       	ldi	r24, 0x08	; 8
    fd78:	18 d0       	rcall	.+48     	; 0xfdaa <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    fd7a:	1d d0       	rcall	.+58     	; 0xfdb6 <verifySpace>
    }
    putch(STK_OK);
    fd7c:	80 e1       	ldi	r24, 0x10	; 16
    fd7e:	01 d0       	rcall	.+2      	; 0xfd82 <putch>
    fd80:	6f cf       	rjmp	.-290    	; 0xfc60 <main+0x60>

0000fd82 <putch>:
  }
}

void putch(char ch) {
    fd82:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    fd84:	80 91 c0 00 	lds	r24, 0x00C0
    fd88:	85 ff       	sbrs	r24, 5
    fd8a:	fc cf       	rjmp	.-8      	; 0xfd84 <putch+0x2>
  UART_UDR = ch;
    fd8c:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    fd90:	08 95       	ret

0000fd92 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    fd92:	80 91 c0 00 	lds	r24, 0x00C0
    fd96:	87 ff       	sbrs	r24, 7
    fd98:	fc cf       	rjmp	.-8      	; 0xfd92 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    fd9a:	80 91 c0 00 	lds	r24, 0x00C0
    fd9e:	84 fd       	sbrc	r24, 4
    fda0:	01 c0       	rjmp	.+2      	; 0xfda4 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fda2:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UART_UDR;
    fda4:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    fda8:	08 95       	ret

0000fdaa <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    fdaa:	e0 e6       	ldi	r30, 0x60	; 96
    fdac:	f0 e0       	ldi	r31, 0x00	; 0
    fdae:	98 e1       	ldi	r25, 0x18	; 24
    fdb0:	90 83       	st	Z, r25
  WDTCSR = x;
    fdb2:	80 83       	st	Z, r24
}
    fdb4:	08 95       	ret

0000fdb6 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    fdb6:	ed df       	rcall	.-38     	; 0xfd92 <getch>
    fdb8:	80 32       	cpi	r24, 0x20	; 32
    fdba:	19 f0       	breq	.+6      	; 0xfdc2 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    fdbc:	88 e0       	ldi	r24, 0x08	; 8
    fdbe:	f5 df       	rcall	.-22     	; 0xfdaa <watchdogConfig>
    fdc0:	ff cf       	rjmp	.-2      	; 0xfdc0 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    fdc2:	84 e1       	ldi	r24, 0x14	; 20
}
    fdc4:	de cf       	rjmp	.-68     	; 0xfd82 <putch>

0000fdc6 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    fdc6:	1f 93       	push	r17
    fdc8:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    fdca:	e3 df       	rcall	.-58     	; 0xfd92 <getch>
    fdcc:	11 50       	subi	r17, 0x01	; 1
    fdce:	e9 f7       	brne	.-6      	; 0xfdca <getNch+0x4>
  verifySpace();
    fdd0:	f2 df       	rcall	.-28     	; 0xfdb6 <verifySpace>
}
    fdd2:	1f 91       	pop	r17
    fdd4:	08 95       	ret

0000fdd6 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    fdd6:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    fdd8:	80 e0       	ldi	r24, 0x00	; 0
    fdda:	e7 df       	rcall	.-50     	; 0xfdaa <watchdogConfig>
  __asm__ __volatile__ (
    fddc:	ee 27       	eor	r30, r30
    fdde:	ff 27       	eor	r31, r31
    fde0:	09 94       	ijmp
